
/* File generated by gen_cfile.py. Should not be modified. */

#include "slave_node_example.h"

/**************************************************************************/
/* Declaration of mapped variables                                        */
/**************************************************************************/
UNS16 Sensor = 0x0;		/* Mapped at index 0x2000, subindex 0x00 */
UNS16 Actuator = 0x0;		/* Mapped at index 0x2001, subindex 0x00 */

/**************************************************************************/
/* Declaration of value range types                                       */
/**************************************************************************/

#define valueRange_EMC 0x24 /* Type for index 0x1003 subindex 0x00 (only set of value 0 is possible) */
UNS32 ObjDict_valueRangeTest (UNS8 typeValue, void * value)
{
  switch (typeValue) {
    case valueRange_EMC:
      if (*(UNS8*)value != (UNS8)0) return OD_VALUE_RANGE_EXCEEDED;
      break;
  }
  return 0;
}

/**************************************************************************/
/* The node id                                                            */
/**************************************************************************/
/* node_id default value.*/
UNS8 ObjDict_bDeviceNodeId = 0x05;

/**************************************************************************/
/* Array of message processing information */

const UNS8 ObjDict_iam_a_slave = 1;

TIMER_HANDLE ObjDict_heartBeatTimers[1];

/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

                               OBJECT DICTIONARY

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

/* index 0x1000 :   Device Type. */
                    UNS32 ObjDict_obj1000 = 0x0;	/* 0 */
                    subindex ObjDict_Index1000[] = 
                     {
                       { RO, CANopen_TYPE_uint32, (void*)&ObjDict_obj1000 }
                     };

/* index 0x1001 :   Error Register. */
                    UNS8 ObjDict_obj1001 = 0x0;	/* 0 */
                    subindex ObjDict_Index1001[] = 
                     {
                       { RO, CANopen_TYPE_uint8, (void*)&ObjDict_obj1001 }
                     };

/* index 0x1003 :   Pre-defined Error Field. */
                    UNS8 ObjDict_highestSubIndex_obj1003 = 0; /* number of subindex - 1*/
                    UNS32 ObjDict_obj1003[] = 
                    {
                      0x0,	/* 0 */
                      0x0,	/* 0 */
                      0x0,	/* 0 */
                      0x0	/* 0 */
                    };
                    ODCallback_t ObjDict_Index1003_callbacks[] = 
                     {
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                     };
                    subindex ObjDict_Index1003[] = 
                     {
                       { RW, valueRange_EMC, (void*)&ObjDict_highestSubIndex_obj1003 },
                       { RO, CANopen_TYPE_uint32, (void*)&ObjDict_obj1003[0] },
                       { RO, CANopen_TYPE_uint32, (void*)&ObjDict_obj1003[1] },
                       { RO, CANopen_TYPE_uint32, (void*)&ObjDict_obj1003[2] },
                       { RO, CANopen_TYPE_uint32, (void*)&ObjDict_obj1003[3] }
                     };

/* index 0x1005 :   SYNC COB ID. */
                    UNS16 ObjDict_obj1005 = 0x0;	/* 0 */
                    ODCallback_t ObjDict_Index1005_callbacks[] = 
                     {
                       NULL,
                     };
                    subindex ObjDict_Index1005[] = 
                     {
                       { RW, CANopen_TYPE_uint16, (void*)&ObjDict_obj1005 }
                     };

/* index 0x1006 :   Communication / Cycle Period. */
                    UNS32 ObjDict_obj1006 = 0x0;	/* 0 */
                    ODCallback_t ObjDict_Index1006_callbacks[] = 
                     {
                       NULL,
                     };
                    subindex ObjDict_Index1006[] = 
                     {
                       { RW, CANopen_TYPE_uint32, (void*)&ObjDict_obj1006 }
                     };

/* index 0x1008 :   Manufacturer Device Name. */
                    UNS8 ObjDict_obj1008[28] = "CargoDash Slave Node Example";
                    subindex ObjDict_Index1008[] = 
                     {
                       { RO, CANopen_TYPE_visible_string, (void*)&ObjDict_obj1008 }
                     };

/* index 0x100C :   Guard Time */ 
                    UNS16 ObjDict_obj100C = 0x0;   /* 0 */

/* index 0x100D :   Life Time Factor */ 
                    UNS8 ObjDict_obj100D = 0x0;   /* 0 */

/* index 0x1014 :   Emergency COB ID. */
                    UNS16 ObjDict_obj1014 = 0x85;	/* 133 */
                    subindex ObjDict_Index1014[] = 
                     {
                       { RW, CANopen_TYPE_uint16, (void*)&ObjDict_obj1014 }
                     };

/* index 0x1016 :   Consumer Heartbeat Time */
                    UNS8 ObjDict_highestSubIndex_obj1016 = 0;
                    UNS32 ObjDict_obj1016[]={0};

/* index 0x1017 :   Producer Heartbeat Time. */
                    UNS16 ObjDict_obj1017 = 0x2710;	/* 10000 */
                    ODCallback_t ObjDict_Index1017_callbacks[] = 
                     {
                       NULL,
                     };
                    subindex ObjDict_Index1017[] = 
                     {
                       { RW, CANopen_TYPE_uint16, (void*)&ObjDict_obj1017 }
                     };

/* index 0x1018 :   Identity. */
                    UNS8 ObjDict_highestSubIndex_obj1018 = 4; /* number of subindex - 1*/
                    UNS32 ObjDict_obj1018_Vendor_ID = 0x0;	/* 0 */
                    UNS32 ObjDict_obj1018_Product_Code = 0x0;	/* 0 */
                    UNS32 ObjDict_obj1018_Revision_Number = 0x0;	/* 0 */
                    UNS32 ObjDict_obj1018_Serial_Number = 0x0;	/* 0 */
                    subindex ObjDict_Index1018[] = 
                     {
                       { RO, CANopen_TYPE_uint8, (void*)&ObjDict_highestSubIndex_obj1018 },
                       { RO, CANopen_TYPE_uint32, (void*)&ObjDict_obj1018_Vendor_ID },
                       { RO, CANopen_TYPE_uint32, (void*)&ObjDict_obj1018_Product_Code },
                       { RO, CANopen_TYPE_uint32, (void*)&ObjDict_obj1018_Revision_Number },
                       { RO, CANopen_TYPE_uint32, (void*)&ObjDict_obj1018_Serial_Number }
                     };

/* index 0x1200 :   Server SDO Parameter. */
                    UNS8 ObjDict_highestSubIndex_obj1200 = 2; /* number of subindex - 1*/
                    UNS16 ObjDict_obj1200_COB_ID_Client_to_Server_Receive_SDO = 0x605;	/* 1541 */
                    UNS16 ObjDict_obj1200_COB_ID_Server_to_Client_Transmit_SDO = 0x585;	/* 1413 */
                    subindex ObjDict_Index1200[] = 
                     {
                       { RO, CANopen_TYPE_uint8, (void*)&ObjDict_highestSubIndex_obj1200 },
                       { RO, CANopen_TYPE_uint16, (void*)&ObjDict_obj1200_COB_ID_Client_to_Server_Receive_SDO },
                       { RO, CANopen_TYPE_uint16, (void*)&ObjDict_obj1200_COB_ID_Server_to_Client_Transmit_SDO }
                     };

/* index 0x1400 :   Receive PDO 1 Parameter. */
                    UNS8 ObjDict_highestSubIndex_obj1400 = 6; /* number of subindex - 1*/
                    UNS16 ObjDict_obj1400_COB_ID_used_by_PDO = 0x205;	/* 517 */
                    UNS8 ObjDict_obj1400_Transmission_Type = 0x0;	/* 0 */
                    UNS16 ObjDict_obj1400_Inhibit_Time = 0x0;	/* 0 */
                    UNS8 ObjDict_obj1400_Compatibility_Entry = 0x0;	/* 0 */
                    UNS16 ObjDict_obj1400_Event_Timer = 0x0;	/* 0 */
                    UNS8 ObjDict_obj1400_SYNC_start_value = 0x0;	/* 0 */
                    subindex ObjDict_Index1400[] = 
                     {
                       { RO, CANopen_TYPE_uint8, (void*)&ObjDict_highestSubIndex_obj1400 },
                       { RW, CANopen_TYPE_uint16, (void*)&ObjDict_obj1400_COB_ID_used_by_PDO },
                       { RW, CANopen_TYPE_uint8, (void*)&ObjDict_obj1400_Transmission_Type },
                       { RW, CANopen_TYPE_uint16, (void*)&ObjDict_obj1400_Inhibit_Time },
                       { RW, CANopen_TYPE_uint8, (void*)&ObjDict_obj1400_Compatibility_Entry },
                       { RW, CANopen_TYPE_uint16, (void*)&ObjDict_obj1400_Event_Timer },
                       { RW, CANopen_TYPE_uint8, (void*)&ObjDict_obj1400_SYNC_start_value }
                     };

/* index 0x1600 :   Receive PDO 1 Mapping. */
                    UNS8 ObjDict_highestSubIndex_obj1600 = 1; /* number of subindex - 1*/
                    UNS32 ObjDict_obj1600[] = 
                    {
                      0x20010010	/* 536936464 */
                    };
                    ODCallback_t ObjDict_Index1600_callbacks[] = 
                     {
                       NULL,
                       NULL,
                     };
                    subindex ObjDict_Index1600[] = 
                     {
                       { RW, CANopen_TYPE_uint8, (void*)&ObjDict_highestSubIndex_obj1600 },
                       { RW, CANopen_TYPE_uint32, (void*)&ObjDict_obj1600[0] }
                     };

/* index 0x1800 :   Transmit PDO 1 Parameter. */
                    UNS8 ObjDict_highestSubIndex_obj1800 = 6; /* number of subindex - 1*/
                    UNS16 ObjDict_obj1800_COB_ID_used_by_PDO = 0x185;	/* 389 */
                    UNS8 ObjDict_obj1800_Transmission_Type = 0x0;	/* 0 */
                    UNS16 ObjDict_obj1800_Inhibit_Time = 0x0;	/* 0 */
                    UNS8 ObjDict_obj1800_Compatibility_Entry = 0x0;	/* 0 */
                    UNS16 ObjDict_obj1800_Event_Timer = 0x0;	/* 0 */
                    UNS8 ObjDict_obj1800_SYNC_start_value = 0x0;	/* 0 */
                    ODCallback_t ObjDict_Index1800_callbacks[] = 
                     {
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                     };
                    subindex ObjDict_Index1800[] = 
                     {
                       { RO, CANopen_TYPE_uint8, (void*)&ObjDict_highestSubIndex_obj1800 },
                       { RW, CANopen_TYPE_uint16, (void*)&ObjDict_obj1800_COB_ID_used_by_PDO },
                       { RW, CANopen_TYPE_uint8, (void*)&ObjDict_obj1800_Transmission_Type },
                       { RW, CANopen_TYPE_uint16, (void*)&ObjDict_obj1800_Inhibit_Time },
                       { RW, CANopen_TYPE_uint8, (void*)&ObjDict_obj1800_Compatibility_Entry },
                       { RW, CANopen_TYPE_uint16, (void*)&ObjDict_obj1800_Event_Timer },
                       { RW, CANopen_TYPE_uint8, (void*)&ObjDict_obj1800_SYNC_start_value }
                     };

/* index 0x1A00 :   Transmit PDO 1 Mapping. */
                    UNS8 ObjDict_highestSubIndex_obj1A00 = 1; /* number of subindex - 1*/
                    UNS32 ObjDict_obj1A00[] = 
                    {
                      0x20000010	/* 536870928 */
                    };
                    ODCallback_t ObjDict_Index1A00_callbacks[] = 
                     {
                       NULL,
                       NULL,
                     };
                    subindex ObjDict_Index1A00[] = 
                     {
                       { RW, CANopen_TYPE_uint8, (void*)&ObjDict_highestSubIndex_obj1A00 },
                       { RW, CANopen_TYPE_uint32, (void*)&ObjDict_obj1A00[0] }
                     };

/* index 0x2000 :   Mapped variable Sensor */
                    ODCallback_t Sensor_callbacks[] = 
                     {
                       NULL,
                     };
                    subindex ObjDict_Index2000[] = 
                     {
                       { RW, CANopen_TYPE_uint16, (void*)&Sensor }
                     };

/* index 0x2001 :   Mapped variable Actuator */
                    ODCallback_t Actuator_callbacks[] = 
                     {
                       NULL,
                     };
                    subindex ObjDict_Index2001[] = 
                     {
                       { RW, CANopen_TYPE_uint16, (void*)&Actuator }
                     };

/**************************************************************************/
/* Declaration of pointed variables                                       */
/**************************************************************************/

const subindex * ObjDict_scanIndexOD (UNS16 wIndex, UNS8 *size, ODCallback_t **callbacks)
{
	int i;
	*callbacks = NULL;
	subindex *si= NULL;
	switch(wIndex){
		case 0x1000: si = ObjDict_Index1000; *size= sizeof(ObjDict_Index1000)/sizeof(ObjDict_Index1000[0]); break;
		case 0x1001: si = ObjDict_Index1001; *size= sizeof(ObjDict_Index1001)/sizeof(ObjDict_Index1001[0]); break;
		case 0x1003: si = ObjDict_Index1003; *size= sizeof(ObjDict_Index1003)/sizeof(ObjDict_Index1003[0]); *callbacks = ObjDict_Index1003_callbacks; break;
		case 0x1005: si = ObjDict_Index1005; *size= sizeof(ObjDict_Index1005)/sizeof(ObjDict_Index1005[0]); *callbacks = ObjDict_Index1005_callbacks; break;
		case 0x1006: si = ObjDict_Index1006; *size= sizeof(ObjDict_Index1006)/sizeof(ObjDict_Index1006[0]); *callbacks = ObjDict_Index1006_callbacks; break;
		case 0x1008: si = ObjDict_Index1008; *size= sizeof(ObjDict_Index1008)/sizeof(ObjDict_Index1008[0]); break;
		case 0x1014: si = ObjDict_Index1014; *size= sizeof(ObjDict_Index1014)/sizeof(ObjDict_Index1014[0]); break;
		case 0x1017: si = ObjDict_Index1017; *size= sizeof(ObjDict_Index1017)/sizeof(ObjDict_Index1017[0]); *callbacks = ObjDict_Index1017_callbacks; break;
		case 0x1018: si = ObjDict_Index1018; *size= sizeof(ObjDict_Index1018)/sizeof(ObjDict_Index1018[0]); break;
		case 0x1200: si = ObjDict_Index1200; *size= sizeof(ObjDict_Index1200)/sizeof(ObjDict_Index1200[0]); break;
		case 0x1400: si = ObjDict_Index1400; *size= sizeof(ObjDict_Index1400)/sizeof(ObjDict_Index1400[0]); break;
		case 0x1600: si = ObjDict_Index1600; *size= sizeof(ObjDict_Index1600)/sizeof(ObjDict_Index1600[0]); *callbacks = ObjDict_Index1600_callbacks; break;
		case 0x1800: si = ObjDict_Index1800; *size= sizeof(ObjDict_Index1800)/sizeof(ObjDict_Index1800[0]); *callbacks = ObjDict_Index1800_callbacks; break;
		case 0x1A00: si = ObjDict_Index1A00; *size= sizeof(ObjDict_Index1A00)/sizeof(ObjDict_Index1A00[0]); *callbacks = ObjDict_Index1A00_callbacks; break;
		case 0x2000: si = ObjDict_Index2000; *size= sizeof(ObjDict_Index2000)/sizeof(ObjDict_Index2000[0]); *callbacks = Sensor_callbacks; break;
		case 0x2001: si = ObjDict_Index2001; *size= sizeof(ObjDict_Index2001)/sizeof(ObjDict_Index2001[0]); *callbacks = Actuator_callbacks; break;
		default:
			return NULL;
	}
	return si;
}

/* 
 * To count at which received SYNC a PDO must be sent.
 * Even if no pdoTransmit are defined, at least one entry is computed
 * for compilations issues.
 */
s_PDO_status ObjDict_PDO_status[1] = {s_PDO_status_Initializer};

CO_Data ObjDict_Data = CANOPEN_NODE_DATA_INITIALIZER(ObjDict);

UNS8 ObjDict_DataSize(const subindex *s) {
  if(s->bDataType==valueRange_EMC) return 1;
  else return 0;
}

